var dir_9c6faab82c22511b50177aa2e38e2780 =
[
    [ "babylonian_method.cpp", "babylonian__method_8cpp.html", "babylonian__method_8cpp" ],
    [ "bisection_method.cpp", "bisection__method_8cpp.html", "bisection__method_8cpp" ],
    [ "brent_method_extrema.cpp", "brent__method__extrema_8cpp.html", "brent__method__extrema_8cpp" ],
    [ "composite_simpson_rule.cpp", "composite__simpson__rule_8cpp.html", "composite__simpson__rule_8cpp" ],
    [ "durand_kerner_roots.cpp", "durand__kerner__roots_8cpp.html", "durand__kerner__roots_8cpp" ],
    [ "false_position.cpp", "false__position_8cpp.html", "false__position_8cpp" ],
    [ "fast_fourier_transform.cpp", "fast__fourier__transform_8cpp.html", "fast__fourier__transform_8cpp" ],
    [ "gaussian_elimination.cpp", "gaussian__elimination_8cpp.html", "gaussian__elimination_8cpp" ],
    [ "golden_search_extrema.cpp", "golden__search__extrema_8cpp.html", "golden__search__extrema_8cpp" ],
    [ "gram_schmidt.cpp", "gram__schmidt_8cpp.html", "gram__schmidt_8cpp" ],
    [ "inverse_fast_fourier_transform.cpp", "inverse__fast__fourier__transform_8cpp.html", "inverse__fast__fourier__transform_8cpp" ],
    [ "lu_decompose.cpp", "lu__decompose_8cpp.html", "lu__decompose_8cpp" ],
    [ "lu_decomposition.h", "lu__decomposition_8h.html", "lu__decomposition_8h" ],
    [ "midpoint_integral_method.cpp", "midpoint__integral__method_8cpp.html", "midpoint__integral__method_8cpp" ],
    [ "newton_raphson_method.cpp", "newton__raphson__method_8cpp.html", "newton__raphson__method_8cpp" ],
    [ "ode_forward_euler.cpp", "ode__forward__euler_8cpp.html", "ode__forward__euler_8cpp" ],
    [ "ode_midpoint_euler.cpp", "ode__midpoint__euler_8cpp.html", "ode__midpoint__euler_8cpp" ],
    [ "ode_semi_implicit_euler.cpp", "ode__semi__implicit__euler_8cpp.html", "ode__semi__implicit__euler_8cpp" ],
    [ "qr_decompose.h", "qr__decompose_8h.html", "qr__decompose_8h" ],
    [ "qr_decomposition.cpp", "qr__decomposition_8cpp.html", "qr__decomposition_8cpp" ],
    [ "qr_eigen_values.cpp", "qr__eigen__values_8cpp.html", "qr__eigen__values_8cpp" ],
    [ "rungekutta.cpp", "rungekutta_8cpp.html", "rungekutta_8cpp" ],
    [ "successive_approximation.cpp", "successive__approximation_8cpp.html", "successive__approximation_8cpp" ]
];